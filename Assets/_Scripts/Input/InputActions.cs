//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerLand"",
            ""id"": ""b7b42c89-228b-4084-960b-b6c71e72fbad"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fe2ac948-7e90-4909-8d4f-7be90fd483ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""1512423e-73c1-4b51-ae29-13ba14c027a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f2f8bdb3-29f6-483a-bc26-60e388b52769"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""3d993310-09d8-4876-9e3b-3a8f37c6710e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slash"",
                    ""type"": ""Button"",
                    ""id"": ""5e926b30-91a8-4b25-8b35-d987029c66fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roar"",
                    ""type"": ""Button"",
                    ""id"": ""cb739a8c-fad7-4fc5-89fe-1cca8fcbb3d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sniff"",
                    ""type"": ""Button"",
                    ""id"": ""68e4cd4d-46bb-43c7-8ef8-e37f75e74fa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dcd5fef7-9877-49ef-8d79-d27c05984299"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aa9635c4-51af-40ef-afa7-424b6ff98bf5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eb05772e-3a0d-4b95-b5bf-c3a9d8d0e22d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c82e819-541c-4c83-adab-b464146d7767"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d375ba67-79e9-4625-84bc-f4364ca1cb27"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa939b93-20ff-4fcf-9410-a2d06f2efbf9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28de90de-fa48-403c-9479-fcbbab6b11f3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b51672d-2174-4243-a467-60bf82cd41e9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de8491d0-759f-43ad-9175-b0a5e2fd29f1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6268357-6ec5-44a6-a2d2-8d7bbf8a7cfb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sniff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b8cc6ba-8192-46ae-8d5e-059c7867b6b2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerLand
        m_PlayerLand = asset.FindActionMap("PlayerLand", throwIfNotFound: true);
        m_PlayerLand_Move = m_PlayerLand.FindAction("Move", throwIfNotFound: true);
        m_PlayerLand_Run = m_PlayerLand.FindAction("Run", throwIfNotFound: true);
        m_PlayerLand_Jump = m_PlayerLand.FindAction("Jump", throwIfNotFound: true);
        m_PlayerLand_Roll = m_PlayerLand.FindAction("Roll", throwIfNotFound: true);
        m_PlayerLand_Slash = m_PlayerLand.FindAction("Slash", throwIfNotFound: true);
        m_PlayerLand_Roar = m_PlayerLand.FindAction("Roar", throwIfNotFound: true);
        m_PlayerLand_Sniff = m_PlayerLand.FindAction("Sniff", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerLand
    private readonly InputActionMap m_PlayerLand;
    private List<IPlayerLandActions> m_PlayerLandActionsCallbackInterfaces = new List<IPlayerLandActions>();
    private readonly InputAction m_PlayerLand_Move;
    private readonly InputAction m_PlayerLand_Run;
    private readonly InputAction m_PlayerLand_Jump;
    private readonly InputAction m_PlayerLand_Roll;
    private readonly InputAction m_PlayerLand_Slash;
    private readonly InputAction m_PlayerLand_Roar;
    private readonly InputAction m_PlayerLand_Sniff;
    public struct PlayerLandActions
    {
        private @InputActions m_Wrapper;
        public PlayerLandActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerLand_Move;
        public InputAction @Run => m_Wrapper.m_PlayerLand_Run;
        public InputAction @Jump => m_Wrapper.m_PlayerLand_Jump;
        public InputAction @Roll => m_Wrapper.m_PlayerLand_Roll;
        public InputAction @Slash => m_Wrapper.m_PlayerLand_Slash;
        public InputAction @Roar => m_Wrapper.m_PlayerLand_Roar;
        public InputAction @Sniff => m_Wrapper.m_PlayerLand_Sniff;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLandActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerLandActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerLandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerLandActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Slash.started += instance.OnSlash;
            @Slash.performed += instance.OnSlash;
            @Slash.canceled += instance.OnSlash;
            @Roar.started += instance.OnRoar;
            @Roar.performed += instance.OnRoar;
            @Roar.canceled += instance.OnRoar;
            @Sniff.started += instance.OnSniff;
            @Sniff.performed += instance.OnSniff;
            @Sniff.canceled += instance.OnSniff;
        }

        private void UnregisterCallbacks(IPlayerLandActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Slash.started -= instance.OnSlash;
            @Slash.performed -= instance.OnSlash;
            @Slash.canceled -= instance.OnSlash;
            @Roar.started -= instance.OnRoar;
            @Roar.performed -= instance.OnRoar;
            @Roar.canceled -= instance.OnRoar;
            @Sniff.started -= instance.OnSniff;
            @Sniff.performed -= instance.OnSniff;
            @Sniff.canceled -= instance.OnSniff;
        }

        public void RemoveCallbacks(IPlayerLandActions instance)
        {
            if (m_Wrapper.m_PlayerLandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerLandActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerLandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerLandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerLandActions @PlayerLand => new PlayerLandActions(this);
    public interface IPlayerLandActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnSlash(InputAction.CallbackContext context);
        void OnRoar(InputAction.CallbackContext context);
        void OnSniff(InputAction.CallbackContext context);
    }
}
